name: Test Suites

# We are a reusable Workflow only
on:
  workflow_call:
    secrets:
      SLACK_WEBHOOK_URL:
        required: false

env:
  MODULE_ID: ${{ github.event.repository.name }}

jobs:
  tests:
    name: Tests ${{ github.event.repository.name }}
    runs-on: ${{ matrix.os }}
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: BoxLang123!
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P BoxLang123! -Q 'SELECT 1' -C || /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P BoxLang123! -Q 'SELECT 1'"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=10
          --health-start-period=60s
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        jdkVersion: [ "21" ]
        experimental: [false]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: "temurin"
          java-version: ${{ matrix.jdkVersion }}

      - name: Setup Database and Fixtures
        run: |
          # Wait a bit more for SQL Server to be fully ready
          sleep 30

          # Run our existing initialization scripts
          echo "Running initialization scripts..."
          for script in docker/init/*.sql; do
            if [ -f "$script" ]; then
              echo "Executing $script..."
              docker run --rm --network="host" -v "${PWD}/docker/init:/scripts" mcr.microsoft.com/mssql/server:2022-latest \
                /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P BoxLang123! -i "/scripts/$(basename "$script")" -C || \
              docker run --rm --network="host" -v "${PWD}/docker/init:/scripts" mcr.microsoft.com/mssql/server:2022-latest \
                /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P BoxLang123! -i "/scripts/$(basename "$script")"
            fi
          done

          # Verify setup
          echo "Verifying database setup..."
          docker run --rm --network="host" mcr.microsoft.com/mssql/server:2022-latest \
            /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P BoxLang123! -d boxlang_test -Q "SELECT COUNT(*) as UserCount FROM users" -C || \
          docker run --rm --network="host" mcr.microsoft.com/mssql/server:2022-latest \
            /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P BoxLang123! -d boxlang_test -Q "SELECT COUNT(*) as UserCount FROM users"

      - name: Test Module
        run: |
          ./gradlew downloadBoxLang
          # this is done in order to build the module structure before testing
          ./gradlew shadowJar test --stacktrace --console=plain

      - name: Publish Test Reports
        uses: mikepenz/action-junit-report@v5.6.2
        if: always()
        with:
          report_paths: |
            **/build/test-results/test/*.xml
            **/surefire-reports/*.xml
            **/failsafe-reports/*.xml
          check_name: "Tests Report ${{ matrix.os }}-${{ matrix.jdkVersion }}"
          include_passed: false
          fail_on_failure: true
          detailed_summary: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}-${{ matrix.jdkVersion }}
          path: |
            **/build/reports/tests/**
            **/build/test-results/**

      - name: Inform Slack
        if: ${{ failure() && github.ref == 'refs/heads/development' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: boxlang
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_MESSAGE: "${{ env.MODULE_ID }} Tests FAILED!  You broke the build! :("
          SLACK_TITLE: "${{ env.MODULE_ID }} Build Failure"
          SLACK_USERNAME: CI
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  publish-test-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: tests
    if: always()
    permissions:
      checks: write
      pull-requests: write
      contents: read
      issues: read
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            artifacts/**/*.xml
